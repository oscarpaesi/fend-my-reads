{"version":3,"sources":["BooksAPI.js","Book.js","Shelf.js","BookList.js","BookSearch.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","change","event","newShelf","target","value","_this","props","onBookChanged","_this$props$book","this","title","authors","imageLinks","coverUrl","thumbnail","react_default","a","createElement","className","src","alt","onChange","disabled","Component","Shelf","_this$props","map","i","key","src_Book","BookList","state","setState","shelves","react_router","push","to","shelve","index","src_Shelf","onClick","BookSearch","mustClose","resultBooks","close","updateQuery","getShelfBookIsOn","currentQuery","trim","BooksAPI","filter","sort","b","forEach","bookIds","entry","includes","_this2","_this$state","type","placeholder","BooksApp","componentDidMount","newBooks","findIndex","defineProperty","$set","newBook","$push","getBooksInShelf","bookInShelf","find","getShelves","exact","path","render","src_BookList","src_BookSearch","React","ReactDOM","react_router_dom","basename","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1f0ca46f.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)","import React, { Component } from 'react'\r\n\r\nclass Book extends Component {\r\n\r\n  change = (event) => {\r\n    const newShelf = event.target.value\r\n    this.props.onBookChanged(this.props.book, newShelf)\r\n  }\r\n  //\r\n  // componentDidMount() {\r\n  //   // console.log(\"Book\", this.props.book)\r\n  // }\r\n\r\n  render() {\r\n    const { title, authors, shelf, imageLinks } = this.props.book\r\n    const coverUrl = imageLinks ? imageLinks.thumbnail : \"\"\r\n    return (\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <img className=\"book-cover\" src={ coverUrl } alt={ title }/>\r\n          <div className=\"book-shelf-changer\">\r\n            <select onChange={ this.change } value={ shelf }>\r\n              <option value=\"move\" disabled>Move to...</option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{ title }</div>\r\n        <div className=\"book-authors\">{ authors }</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Book;","import React, { Component } from 'react'\r\nimport Book from './Book'\r\n\r\nclass Shelf extends Component {\r\n  render() {\r\n    const { title, books, onBookChanged } = this.props\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{ title }</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n          {books.map((book, i) => (\r\n            <li key={ i }>\r\n              <Book book={ books[i] } onBookChanged={ onBookChanged }/>\r\n            </li>\r\n          ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Shelf;","import React, { Component } from 'react'\r\nimport Shelf from './Shelf'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nclass BookList extends Component {\r\n\r\n  state = {\r\n    search: false\r\n  }\r\n\r\n  search = () => {\r\n    this.setState({ search: true })\r\n  }\r\n\r\n  render() {\r\n    const { shelves, onBookChanged } = this.props\r\n    return (this.state.search)\r\n      ? <Redirect push to=\"/search\"/>\r\n      : (\r\n      <div className=\"list-books\">\r\n        <div className=\"list-books-title\">\r\n          <h1>MyReads</h1>\r\n        </div>\r\n        <div className=\"list-books-content\">\r\n          <div>\r\n          {shelves.map((shelve, index) => (\r\n            <Shelf key={ index } title={ shelve.title } books={ shelve.books } onBookChanged={ onBookChanged }/>\r\n          ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"open-search\">\r\n          <button onClick={ this.search }>Add a book</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookList;","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Book from './Book'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\nclass BookSearch extends Component {\r\n\r\n  state = {\r\n    mustClose: false,\r\n    query: '',\r\n    resultBooks: []\r\n  }\r\n\r\n  close = () => {\r\n    this.setState({ mustClose: true })\r\n  }\r\n\r\n  updateQuery = (query) => {\r\n    const { getShelfBookIsOn } = this.props\r\n    const currentQuery = query.trim();\r\n    this.setState({ query })\r\n    if (!currentQuery) {\r\n      this.setState({ resultBooks: [] })\r\n      return\r\n    }\r\n    BooksAPI.search(currentQuery)\r\n    .then((books) => {\r\n      let resultBooks\r\n      if (\"error\" in books) {\r\n        resultBooks = []\r\n      } else {\r\n        resultBooks = books\r\n          .filter((book) => {\r\n            // Make sure the book has a title, an author and a cover image,\r\n            // so it can be properly displayed\r\n            return (book.title && book.authors && book.imageLinks)\r\n          })\r\n          .sort((a, b) => {\r\n            if (a.title < b.title) return -1\r\n            if (a.title > b.title) return 1\r\n            return 0\r\n          })\r\n        resultBooks.forEach(book => {\r\n          const shelf = getShelfBookIsOn(book)\r\n          book.shelf = shelf\r\n        })\r\n      }\r\n      this.setState({ resultBooks: resultBooks })\r\n    })\r\n  }\r\n  //\r\n  // componentDidUpdate = () => {\r\n  //   console.log(\"Books\", this.state.resultBooks)\r\n  // }\r\n\r\n  getBooksInShelf(shelf) {\r\n    let bookIds = this.state.shelves\r\n      .filter(entry => entry.shelf === shelf)\r\n      .map(entry => entry.id)\r\n    return this.state.books\r\n      .filter(book => bookIds.includes(book.id))\r\n      .map(book => ({...book, shelf}))\r\n  }\r\n\r\n  render() {\r\n    const { mustClose, query, resultBooks } = this.state\r\n    const { onBookChanged } = this.props\r\n    return (mustClose)\r\n      ? <Redirect push to=\"/\" />\r\n      : (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <button className=\"close-search\" onClick={ this.close }>Close</button>\r\n          <div className=\"search-books-input-wrapper\">\r\n            {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={ query }\r\n              onChange={ (event) => this.updateQuery(event.target.value) }\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n          {resultBooks.map((book, i) => (\r\n            <li key={ i }>\r\n              <Book book={ resultBooks[i] } onBookChanged={ onBookChanged }/>\r\n            </li>\r\n          ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BookSearch;","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport BookList from './BookList'\r\nimport BookSearch from './BookSearch'\r\nimport update from 'immutability-helper'\r\n\r\nclass BooksApp extends React.Component {\r\n\r\n  state = {\r\n    books: []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({ books })\r\n    })\r\n  }\r\n\r\n  onBookChanged = (book, newShelf) => {\r\n    const index = this.state.books.findIndex(b => b.id === book.id)\r\n    let newBooks\r\n    if (index >= 0) { // Books is already in one of the shelves\r\n      newBooks = update(this.state.books, {[index]: {shelf: {$set: newShelf}}})\r\n    } else { // Book is not in any bookshelf\r\n      let newBook = update(book, {shelf: {$set: newShelf}})\r\n      newBooks = update(this.state.books, {$push: [newBook]})\r\n    }\r\n    BooksAPI.update(book, newShelf).then(() => {\r\n      this.setState({ books: newBooks })\r\n    })\r\n  }\r\n\r\n  getBooksInShelf = (shelf) => {\r\n    return this.state.books\r\n      .filter(book => book.shelf === shelf)\r\n      .sort((a, b) => {\r\n        if (a.title < b.title) return -1\r\n        if (a.title > b.title) return 1\r\n        return 0\r\n      })\r\n  }\r\n\r\n  getShelfBookIsOn = (book) => {\r\n    const bookInShelf = this.state.books.find(b => b.id === book.id)\r\n    const shelf = (bookInShelf) ? bookInShelf.shelf : \"none\"\r\n    return shelf\r\n  }\r\n\r\n  getShelves = () => {\r\n    return [\r\n      { title: \"Currently Reading\", books: this.getBooksInShelf('currentlyReading') },\r\n      { title: \"Want to Read\", books: this.getBooksInShelf('wantToRead') },\r\n      { title: \"Read\", books: this.getBooksInShelf('read') }\r\n    ]\r\n  }\r\n\r\n  render() {\r\n    const shelves = this.getShelves();\r\n    return (\r\n      <div className=\"app\">\r\n          <Route exact path=\"/\" render={() => (\r\n            <BookList\r\n              shelves={ shelves }\r\n              onBookChanged={ this.onBookChanged }\r\n            />\r\n          )}/>\r\n          <Route path=\"/search\" render={() => (\r\n            <BookSearch\r\n              shelves={ shelves }\r\n              onBookChanged={ this.onBookChanged }\r\n              getShelfBookIsOn={ this.getShelfBookIsOn }\r\n            />\r\n          )}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter basename=\"/fend-my-reads\">\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n)"],"sourceRoot":""}